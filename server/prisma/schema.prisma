// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  username          String    @unique @db.VarChar(50)
  email             String    @unique @db.VarChar(100)
  emailVerified     Boolean   @default(false) @map("email_verified")
  passwordHash      String?   @map("password_hash") @db.VarChar(255)
  name              String    @db.VarChar(100)
  avatarUrl         String?   @map("avatar_url")
  nativeLanguage    String    @map("native_language") @db.VarChar(5)
  targetLanguage    String    @map("target_language") @db.VarChar(5)
  timezone          String    @default("UTC") @db.VarChar(50)
  preferences       Json      @default("{}")
  oauthProvider     String?   @map("oauth_provider") @db.VarChar(20)
  oauthId           String?   @map("oauth_id") @db.VarChar(100)
  isActive          Boolean   @default(true) @map("is_active")
  role              String    @default("user") @db.VarChar(20)
  lastLoginAt       DateTime? @map("last_login_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  wordsCreated      Word[]         @relation("WordCreator")
  flashcards        Flashcard[]
  validatedFlashcards Flashcard[] @relation("FlashcardValidator")
  languageLevels    UserLanguageLevel[]
  flashcardShares   FlashcardShare[]
  flashcardInteractions FlashcardInteraction[]
  flashcardReviews  FlashcardReview[]

  @@unique([oauthProvider, oauthId])
  @@map("users")
}

model Word {
  id                Int       @id @default(autoincrement())
  text              String    @db.VarChar(255)
  internationalName String?   @map("international_name") @db.VarChar(255)
  languageCode      String    @map("language_code") @db.VarChar(5)
  partOfSpeech      String?   @map("part_of_speech") @db.VarChar(50)
  definition        String?
  pronunciation     String?   @db.VarChar(255)
  difficultyLevel   Int       @default(1) @map("difficulty_level")
  frequencyRank     Int?      @map("frequency_rank")
  subjectTags       String[]  @map("subject_tags")
  validated         Boolean   @default(false)
  createdBy         Int       @map("created_by")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  creator           User      @relation("WordCreator", fields: [createdBy], references: [id])
  sourceFlashcards  Flashcard[] @relation("SourceWord")
  targetFlashcards  Flashcard[] @relation("TargetWord")
  sourceTranslations WordTranslation[] @relation("SourceWordTranslations")
  targetTranslations WordTranslation[] @relation("TargetWordTranslations")
  exampleSentences  ExampleSentence[]

  @@unique([text, languageCode])
  @@map("words")
}

model Flashcard {
  id                Int       @id @default(autoincrement())
  userId            Int       @map("user_id")
  sourceWordId      Int       @map("source_word_id")
  targetWordId      Int?      @map("target_word_id")
  title             String?   @db.VarChar(255)
  personalNote      String?   @map("personal_note")
  mnemonic          String?
  personalExamples  String[]  @map("personal_examples")
  tags              String[]
  deckName          String?   @map("deck_name") @db.VarChar(100)
  visibility        String    @default("private") @db.VarChar(20)
  validationStatus  String    @default("draft") @map("validation_status") @db.VarChar(20)
  validatedBy       Int?      @map("validated_by")
  validatedAt       DateTime? @map("validated_at")
  rejectionReason   String?   @map("rejection_reason")
  likesCount        Int       @default(0) @map("likes_count")
  downloadsCount    Int       @default(0) @map("downloads_count")
  reportsCount      Int       @default(0) @map("reports_count")
  easinessFactor    Decimal   @default(2.5) @map("easiness_factor") @db.Decimal(3, 2)
  intervalDays      Int       @default(1) @map("interval_days")
  repetitionCount   Int       @default(0) @map("repetition_count")
  nextReviewDate    DateTime  @default(now()) @map("next_review_date") @db.Date
  lastReviewedAt    DateTime? @map("last_reviewed_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  sourceWord        Word      @relation("SourceWord", fields: [sourceWordId], references: [id], onDelete: Cascade)
  targetWord        Word?     @relation("TargetWord", fields: [targetWordId], references: [id], onDelete: Cascade)
  validator         User?     @relation("FlashcardValidator", fields: [validatedBy], references: [id])
  translations      FlashcardTranslation[]
  shares            FlashcardShare[]
  interactions      FlashcardInteraction[]
  reviews           FlashcardReview[]

  @@map("flashcards")
}

model UserLanguageLevel {
  id               Int      @id @default(autoincrement())
  userId           Int      @map("user_id")
  languageCode     String   @map("language_code") @db.VarChar(5)
  level            String   @db.VarChar(10)
  wordsKnown       Int      @default(0) @map("words_known")
  totalStudyTime   Int      @default(0) @map("total_study_time")
  lastAssessment   DateTime? @map("last_assessment")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, languageCode])
  @@map("user_language_levels")
}

model WordTranslation {
  id               Int      @id @default(autoincrement())
  sourceWordId     Int      @map("source_word_id")
  targetWordId     Int      @map("target_word_id")
  confidence       Decimal  @default(1.0) @db.Decimal(3, 2)
  context          String?
  verified         Boolean  @default(false)
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  sourceWord       Word     @relation("SourceWordTranslations", fields: [sourceWordId], references: [id], onDelete: Cascade)
  targetWord       Word     @relation("TargetWordTranslations", fields: [targetWordId], references: [id], onDelete: Cascade)

  @@unique([sourceWordId, targetWordId])
  @@map("word_translations")
}

model ExampleSentence {
  id               Int      @id @default(autoincrement())
  wordId           Int      @map("word_id")
  sentence         String
  translation      String?
  audioUrl         String?  @map("audio_url")
  difficulty       Int      @default(1)
  verified         Boolean  @default(false)
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  word             Word     @relation(fields: [wordId], references: [id], onDelete: Cascade)

  @@map("example_sentences")
}

model FlashcardTranslation {
  id               Int      @id @default(autoincrement())
  flashcardId      Int      @map("flashcard_id")
  languageCode     String   @map("language_code") @db.VarChar(5)
  title            String?  @db.VarChar(255)
  note             String?
  examples         String[]
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  flashcard        Flashcard @relation(fields: [flashcardId], references: [id], onDelete: Cascade)

  @@unique([flashcardId, languageCode])
  @@map("flashcard_translations")
}

model FlashcardShare {
  id               Int      @id @default(autoincrement())
  flashcardId      Int      @map("flashcard_id")
  sharedByUserId   Int      @map("shared_by_user_id")
  shareType        String   @map("share_type") @db.VarChar(20)
  shareUrl         String?  @map("share_url")
  accessCount      Int      @default(0) @map("access_count")
  expiresAt        DateTime? @map("expires_at")
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  flashcard        Flashcard @relation(fields: [flashcardId], references: [id], onDelete: Cascade)
  sharedByUser     User     @relation(fields: [sharedByUserId], references: [id], onDelete: Cascade)

  @@map("flashcard_shares")
}

model FlashcardInteraction {
  id               Int      @id @default(autoincrement())
  flashcardId      Int      @map("flashcard_id")
  userId           Int      @map("user_id")
  interactionType  String   @map("interaction_type") @db.VarChar(20)
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  flashcard        Flashcard @relation(fields: [flashcardId], references: [id], onDelete: Cascade)
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([flashcardId, userId, interactionType])
  @@map("flashcard_interactions")
}

model FlashcardReview {
  id               Int      @id @default(autoincrement())
  flashcardId      Int      @map("flashcard_id")
  userId           Int      @map("user_id")
  quality          Int
  responseTime     Int?     @map("response_time")
  previousEasiness Decimal  @map("previous_easiness") @db.Decimal(3, 2)
  newEasiness      Decimal  @map("new_easiness") @db.Decimal(3, 2)
  previousInterval Int      @map("previous_interval")
  newInterval      Int      @map("new_interval")
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  flashcard        Flashcard @relation(fields: [flashcardId], references: [id], onDelete: Cascade)
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("flashcard_reviews")
}
