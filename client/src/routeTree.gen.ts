/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as FlashcardsRouteImport } from './routes/flashcards'
import { Route as ExercisesRouteImport } from './routes/exercises'
import { Route as DictionaryRouteImport } from './routes/dictionary'
import { Route as CommunityRouteImport } from './routes/community'
import { Route as IndexRouteImport } from './routes/index'

const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const FlashcardsRoute = FlashcardsRouteImport.update({
  id: '/flashcards',
  path: '/flashcards',
  getParentRoute: () => rootRouteImport,
} as any)
const ExercisesRoute = ExercisesRouteImport.update({
  id: '/exercises',
  path: '/exercises',
  getParentRoute: () => rootRouteImport,
} as any)
const DictionaryRoute = DictionaryRouteImport.update({
  id: '/dictionary',
  path: '/dictionary',
  getParentRoute: () => rootRouteImport,
} as any)
const CommunityRoute = CommunityRouteImport.update({
  id: '/community',
  path: '/community',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/community': typeof CommunityRoute
  '/dictionary': typeof DictionaryRoute
  '/exercises': typeof ExercisesRoute
  '/flashcards': typeof FlashcardsRoute
  '/profile': typeof ProfileRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/community': typeof CommunityRoute
  '/dictionary': typeof DictionaryRoute
  '/exercises': typeof ExercisesRoute
  '/flashcards': typeof FlashcardsRoute
  '/profile': typeof ProfileRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/community': typeof CommunityRoute
  '/dictionary': typeof DictionaryRoute
  '/exercises': typeof ExercisesRoute
  '/flashcards': typeof FlashcardsRoute
  '/profile': typeof ProfileRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/community'
    | '/dictionary'
    | '/exercises'
    | '/flashcards'
    | '/profile'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/community'
    | '/dictionary'
    | '/exercises'
    | '/flashcards'
    | '/profile'
  id:
    | '__root__'
    | '/'
    | '/community'
    | '/dictionary'
    | '/exercises'
    | '/flashcards'
    | '/profile'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CommunityRoute: typeof CommunityRoute
  DictionaryRoute: typeof DictionaryRoute
  ExercisesRoute: typeof ExercisesRoute
  FlashcardsRoute: typeof FlashcardsRoute
  ProfileRoute: typeof ProfileRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/flashcards': {
      id: '/flashcards'
      path: '/flashcards'
      fullPath: '/flashcards'
      preLoaderRoute: typeof FlashcardsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/exercises': {
      id: '/exercises'
      path: '/exercises'
      fullPath: '/exercises'
      preLoaderRoute: typeof ExercisesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dictionary': {
      id: '/dictionary'
      path: '/dictionary'
      fullPath: '/dictionary'
      preLoaderRoute: typeof DictionaryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/community': {
      id: '/community'
      path: '/community'
      fullPath: '/community'
      preLoaderRoute: typeof CommunityRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CommunityRoute: CommunityRoute,
  DictionaryRoute: DictionaryRoute,
  ExercisesRoute: ExercisesRoute,
  FlashcardsRoute: FlashcardsRoute,
  ProfileRoute: ProfileRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
